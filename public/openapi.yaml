---
openapi: 3.0.3
info:
  title: api
  version: 1.0.0
servers: []
paths:
  "/auth/register":
    post:
      summary: create new user
      tags:
      - Authentication
      parameters:
      - name: email
        in: query
        required: false
        schema:
          type: string
        example: nomads@nomads.com
      - name: headers[Content-type]
        in: query
        required: false
        schema:
          type: object
          properties:
            Content-type:
              type: string
          required:
          - Content-type
        example:
          Content-type: application/json
      - name: password
        in: query
        required: false
        schema:
          type: string
        example: nomads
      - name: username
        in: query
        required: false
        schema:
          type: string
        example: nomads
      responses:
        '201':
          description: create new user with uniq email; return created user or error;
            return jwt auth token
          content:
            application/json:
              schema:
                type: object
                properties: {}
                required:
                - message
                - user
                - token
              example: {}
        '409':
          description: create new user with uniq email; return created user or error;
            return jwt auth token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: email already exists
  "/":
    get:
      summary: index
      tags:
      - Doc
      responses:
        '200':
          description: returns api documentaion
          content:
            text/html:
              schema:
                type: string
              example: |
                <!DOCTYPE html>
                <html lang="en">
                  <head>
                    <meta charset="utf-8" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <meta
                      name="description"
                      content="SwaggerUI"
                    />
                    <title>SwaggerUI</title>
                    <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css" />
                  </head>
                  <body>
                  <div id="swagger-ui"></div>
                  <script src="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js" crossorigin></script>
                  <script src="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js" crossorigin></script>
                  <script>
                    window.onload = () => {
                      window.ui = SwaggerUIBundle({
                        url: 'openapi.yaml',
                        dom_id: '#swagger-ui',
                        presets: [
                          SwaggerUIBundle.presets.apis,
                          SwaggerUIStandalonePreset
                        ],
                        layout: "StandaloneLayout",
                      });
                    };
                  </script>
                  </body>
                </html>
  "/auth/login":
    post:
      summary: login as user
      tags:
      - Authentication
      parameters:
      - name: email
        in: query
        required: false
        schema:
          type: string
        example: nomads@nomads.com
      - name: headers[Content-type]
        in: query
        required: false
        schema:
          type: object
          properties:
            Content-type:
              type: string
          required:
          - Content-type
        example:
          Content-type: application/json
      - name: password
        in: query
        required: false
        schema:
          type: string
        example: nomads
      responses:
        '200':
          description: login as existing user by email
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                      password_digest:
                        type: string
                      age:
                        type: integer
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      jti:
                        type: string
                    required:
                    - id
                    - username
                    - email
                    - password_digest
                    - age
                    - created_at
                    - updated_at
                    - jti
                  token:
                    type: string
                required:
                - user
                - token
              example:
                user:
                  id: 43
                  username: nomads
                  email: nomads@nomads.com
                  password_digest: "$2a$04$yq/C2X7RjNlNvg2elK2V5.Ng0rFr1LVBPncc0/jtHB6H.eEVPDEpi"
                  age: 3
                  created_at: '2023-10-30T12:37:49.601Z'
                  updated_at: '2023-10-30T12:37:49.601Z'
                  jti: 6cb5fea0-66d4-4e93-ae9b-c99041086f4b
                token: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MywiZXhwIjoxNjk5MzAzNjQwfQ.vPaTI8qeRMXa0za5BPbBNNmdCOKYLh4MUxUdcI0xkls
  "/api/v1/authors":
    get:
      summary: list all authors
      tags:
      - Api::V1::Author
      parameters:
      - name: headers[Authorization]
        in: query
        required: false
        schema:
          type: object
          properties:
            Authorization:
              type: string
          required:
          - Authorization
        example:
          Authorization: bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MywiZXhwIjoxNjk5MzAzNjQwfQ.vPaTI8qeRMXa0za5BPbBNNmdCOKYLh4MUxUdcI0xkls
      responses:
        '200':
          description: list all authors ordered by default
          content:
            application/vnd.api+json:
              schema:
                type: string
              example: '{"data":[]}'
  "/api/v1/users":
    get:
      summary: list all users
      tags:
      - Api::V1::User
      responses:
        '401':
          description: list all users ordered by default
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Unauthorized
      parameters:
      - name: headers[Authorization]
        in: query
        required: false
        schema:
          type: object
          properties:
            Authorization:
              type: string
          required:
          - Authorization
        example:
          Authorization: bearer `12345`
  "/api/v1/users/{user_id}/relationships/roles":
    post:
      summary: add  user`s role
      tags:
      - Api::V1::User
      parameters:
      - name: relationship
        in: path
        required: true
        schema:
          type: string
        example: roles
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
        example: 43
      responses:
        '422':
          description: add new record to users_roles if not exsits already
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Role 100500 does not exists
        '201':
          description: add new record to users_roles if not exsits already
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
              example:
                message: UserRole created successfully
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                role_id:
                  type: string
              required:
              - role_id
            example:
              role_id: '100500'
