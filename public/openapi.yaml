---
openapi: 3.0.3
info:
  title: api
  version: 1.0.0
servers: []
paths:
  "/api/v1/authors":
    get:
      summary: list all authors
      tags:
      - Api::V1::Author
      parameters:
      - name: headers[Authorization]
        in: query
        required: false
        schema:
          type: object
          properties:
            Authorization:
              type: string
          required:
          - Authorization
        example:
          Authorization: bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyLCJleHAiOjE2OTk2MTk5MTd9.z7DrpUv1eI6AS3DEv10lOzqEXIBLx6UFeG9zNkHdeWg
      responses:
        '200':
          description: list all authors ordered by default
          content:
            application/vnd.api+json:
              schema:
                type: string
              example: '{"data":[{"id":"2","type":"authors","links":{"self":"http://www.example.com/api/v1/authors/2"},"attributes":{"username":"nomads"}}]}'
  "/api/v1/roles/{role_id}/relationships/users":
    post:
      summary: set user role
      tags:
      - Api::V1::Role
      parameters:
      - name: relationship
        in: path
        required: true
        schema:
          type: string
        example: users
      - name: role_id
        in: path
        required: true
        schema:
          type: integer
        example: 3
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      id:
                        type: integer
                    required:
                    - type
                    - id
              required:
              - data
            example:
              data:
              - type: users
                id: 3
      responses:
        '204':
          description: create user`s role
          content:
            '':
              schema:
                type: string
              example: ''
    get:
      summary: get user role
      tags:
      - Api::V1::Role
      parameters:
      - name: relationship
        in: path
        required: true
        schema:
          type: string
        example: users
      - name: role_id
        in: path
        required: true
        schema:
          type: integer
        example: 5
      responses:
        '200':
          description: get user`s role
          content:
            application/vnd.api+json:
              schema:
                type: string
              example: '{"data":[],"links":{"self":"http://www.example.com/api/v1/roles/5/relationships/users","related":"http://www.example.com/api/v1/roles/5/users"}}'
    delete:
      summary: unset user role
      tags:
      - Api::V1::Role
      parameters:
      - name: relationship
        in: path
        required: true
        schema:
          type: string
        example: users
      - name: role_id
        in: path
        required: true
        schema:
          type: integer
        example: 7
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      id:
                        type: integer
                    required:
                    - type
                    - id
              required:
              - data
            example:
              data:
              - type: users
                id: 6
      responses:
        '204':
          description: remove user`s role
          content:
            '':
              schema:
                type: string
              example: ''
  "/api/v1/users":
    get:
      summary: unauthorized
      tags:
      - Api::V1::User
      responses:
        '200':
          description: list all users ordered by default
          content:
            application/vnd.api+json:
              schema:
                type: string
              example: '{"data":[{"id":"19","type":"users","links":{"self":"http://www.example.com/api/v1/users/19"},"attributes":{"username":"nomad"},"relationships":{"user-role":{"links":{"self":"http://www.example.com/api/v1/users/19/relationships/user-role","related":"http://www.example.com/api/v1/users/19/user-role"}},"roles":{"links":{"self":"http://www.example.com/api/v1/users/19/relationships/roles","related":"http://www.example.com/api/v1/users/19/roles"}}}}]}'
        '403':
          description: does not return users if user does not have role admin or author
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Forbidden
        '401':
          description: does not return users if unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Unauthorized
  "/":
    get:
      summary: index
      tags:
      - Doc
      responses:
        '200':
          description: returns api documentaion
          content:
            text/html:
              schema:
                type: string
              example: |
                <!DOCTYPE html>
                <html lang="en">
                  <head>
                    <meta charset="utf-8" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <meta
                      name="description"
                      content="SwaggerUI"
                    />
                    <title>SwaggerUI</title>
                    <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css" />
                  </head>
                  <body>
                  <div id="swagger-ui"></div>
                  <script src="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js" crossorigin></script>
                  <script src="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-standalone-preset.js" crossorigin></script>
                  <script>
                    window.onload = () => {
                      window.ui = SwaggerUIBundle({
                        url: 'openapi.yaml',
                        dom_id: '#swagger-ui',
                        presets: [
                          SwaggerUIBundle.presets.apis,
                          SwaggerUIStandalonePreset
                        ],
                        layout: "StandaloneLayout",
                      });
                    };
                  </script>
                  </body>
                </html>
  "/auth/login":
    post:
      summary: login as user
      tags:
      - Authentication
      parameters:
      - name: email
        in: query
        required: false
        schema:
          type: string
        example: nomads@nomads.com
      - name: headers[Content-type]
        in: query
        required: false
        schema:
          type: object
          properties:
            Content-type:
              type: string
          required:
          - Content-type
        example:
          Content-type: application/json
      - name: password
        in: query
        required: false
        schema:
          type: string
        example: nomads
      responses:
        '200':
          description: login as existing user by email
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                      password_digest:
                        type: string
                      age:
                        type: integer
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      jti:
                        type: string
                    required:
                    - id
                    - username
                    - email
                    - password_digest
                    - age
                    - created_at
                    - updated_at
                    - jti
                  token:
                    type: string
                required:
                - user
                - token
              example:
                user:
                  id: 10
                  username: nomads
                  email: nomads@nomads.com
                  password_digest: "$2a$04$HMpmaVUoz3nzQcKCl4OadOI6ncnu.uEtOjIBsJsUwx.G0rJGZcAx6"
                  age: 3
                  created_at: '2023-11-03T12:38:37.661Z'
                  updated_at: '2023-11-03T12:38:37.661Z'
                  jti: 2fb3ab42-9733-4bc7-96a4-5c4ef688f563
                token: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxMCwiZXhwIjoxNjk5NjE5OTE3fQ.u-4neZy25WZ6njGUMLHZoIzegAmOSXWFNQNW1ZSaodk
  "/auth/register":
    post:
      summary: create new user
      tags:
      - Authentication
      parameters:
      - name: email
        in: query
        required: false
        schema:
          type: string
        example: nomads@nomads.com
      - name: headers[Content-type]
        in: query
        required: false
        schema:
          type: object
          properties:
            Content-type:
              type: string
          required:
          - Content-type
        example:
          Content-type: application/json
      - name: password
        in: query
        required: false
        schema:
          type: string
        example: nomads
      - name: username
        in: query
        required: false
        schema:
          type: string
        example: nomads
      responses:
        '201':
          description: create new user with uniq email; return created user or error;
            return jwt auth token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                      password_digest:
                        type: string
                      age:
                        nullable: true
                      created_at:
                        type: string
                      updated_at:
                        type: string
                      jti:
                        type: string
                    required:
                    - id
                    - username
                    - email
                    - password_digest
                    - age
                    - created_at
                    - updated_at
                    - jti
                  token:
                    type: string
                required:
                - message
                - user
                - token
              example:
                message: User created successfully
                user:
                  id: 11
                  username: nomads
                  email: nomads@nomads.com
                  password_digest: "$2a$04$MWOqiRf8mZUOQc0vpUX0..y/1I8UIgD2QiRBluv2V.YGdfhF7HgTO"
                  age: 
                  created_at: '2023-11-03T12:38:37.691Z'
                  updated_at: '2023-11-03T12:38:37.691Z'
                  jti: a58e5d80-9a76-46e1-b254-2769dc99c6cd
                token: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxMSwiZXhwIjoxNjk5NjE5OTE3fQ.wWmnVXdjqC9J8a_fW43IZ8E7w9tQ6hLGsmbIv2ccY8M
        '409':
          description: create new user with uniq email; return created user or error;
            return jwt auth token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: email already exists
  "/api/v1/users/{user_id}/relationships/roles":
    post:
      summary: roles
      tags:
      - Api::V1::User
      parameters:
      - name: relationship
        in: path
        required: true
        schema:
          type: string
        example: roles
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
        example: 14
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                role_id:
                  type: string
              required:
              - role_id
            example:
              role_id: '100500'
      responses:
        '201':
          description: crud roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
              example:
                message: UserRole created successfully
        '422':
          description: crud roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
              example:
                error: Role 100500 does not exists
  "/api/v1/roles":
    get:
      summary: roles
      tags:
      - Api::V1::Role
      responses:
        '200':
          description: crud roles
          content:
            application/vnd.api+json:
              schema:
                type: string
              example: '{"data":[{"id":"18","type":"roles","links":{"self":"http://www.example.com/api/v1/roles/18"},"attributes":{"name":"user"},"relationships":{"user-role":{"links":{"self":"http://www.example.com/api/v1/roles/18/relationships/user-role","related":"http://www.example.com/api/v1/roles/18/user-role"}},"users":{"links":{"self":"http://www.example.com/api/v1/roles/18/relationships/users","related":"http://www.example.com/api/v1/roles/18/users"}}}}]}'
    post:
      summary: roles
      tags:
      - Api::V1::Role
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                    attributes:
                      type: object
                      properties:
                        name:
                          type: string
                      required:
                      - name
                  required:
                  - type
                  - attributes
              required:
              - data
            example:
              data:
                type: roles
                attributes:
                  name: rspec
      responses:
        '201':
          description: crud roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                - message
              example:
                message: Role rspec created successfully
  "/api/v1/users/{user_id}/roles":
    get:
      summary: user role
      tags:
      - Api::V1::Role
      parameters:
      - name: relationship
        in: path
        required: true
        schema:
          type: string
        example: roles
      - name: source
        in: path
        required: true
        schema:
          type: string
        example: api/v1/users
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
        example: 18
      responses:
        '200':
          description: user role
          content:
            application/vnd.api+json:
              schema:
                type: string
              example: '{"data":[{"id":"19","type":"roles","links":{"self":"http://www.example.com/api/v1/roles/19"},"attributes":{"name":"user"},"relationships":{"user-role":{"links":{"self":"http://www.example.com/api/v1/roles/19/relationships/user-role","related":"http://www.example.com/api/v1/roles/19/user-role"}},"users":{"links":{"self":"http://www.example.com/api/v1/roles/19/relationships/users","related":"http://www.example.com/api/v1/roles/19/users"}}}}]}'
